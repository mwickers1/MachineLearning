library(keras)
library(tidyverse)
library(tensorflow)
library(magick)
loadImg <- function(path) {
coin <- image_read(paste0('classifcation/', path))
coinResized <- image_resize(coin, "160x120")
# Extract the raw bitmap matrix with pixel values with `image_data`.
pix <- image_data(coinResized)
# Convert it to an array.
pix_arr <- as.integer(pix)
# Flatten the array into a single dimension.
array_reshape(pix_arr, 57600)
}
coinList <- lapply(coinFiles, loadImg)
coinFiles <- list.files("classification")
coinList <- lapply(coinFiles, loadImg)
coinList <- lapply(coinFiles, loadImg)
loadImg <- function(path) {
coin <- image_read(paste0('classification/', path))
coinResized <- image_resize(coin, "160x120")
# Extract the raw bitmap matrix with pixel values with `image_data`.
pix <- image_data(coinResized)
# Convert it to an array.
pix_arr <- as.integer(pix)
# Flatten the array into a single dimension.
array_reshape(pix_arr, 57600)
}
coinList <- lapply(coinFiles, loadImg)
coinFiles <- list.files("classification")
loadImg <- function(path) {
coin <- image_read(paste0('classification/', path))
coinResized <- image_resize(coin, "160x120")
# Extract the raw bitmap matrix with pixel values with `image_data`.
pix <- image_data(coinResized)
# Convert it to an array.
pix_arr <- as.integer(pix)
# Flatten the array into a single dimension.
array_reshape(pix_arr, 57600)
}
coinList <- lapply(coinFiles, loadImg)
coins <- array(unlist(coinList), dim=c(3059, 57600))
dim(coins)
coinValues <- unlist(lapply(coinFiles, function (f) as.integer(unlist(strsplit(f,"_"))[1])))
unique(coinValues)
nTrain <- floor(0.90 * nrow(coins))
trainIndexes <- sample(1:nrow(coins), size = nTrain)
X_train <- coins[trainIndexes,]
Y_train <- coinValues[trainIndexes]
X_test <- coins[-trainIndexes,]
Y_test <- coinValues[-trainIndexes]
X_train_cen <- scale(X_train, scale=FALSE)
X_train_std <- scale(X_train)
?layer_dense
?regularizer_l2
reg <- regularizer_l2(l = 0.01)
model <- keras_model_sequential() %>%
layer_dense(units=64, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg, input_shape = 57600) %>%
layer_dense(units=128, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,) %>%
layer_dense(units=32, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,)%>%
layer_dense(units=64, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,)%>%
layer_dense(units=5 , activation='softmax', kernel_initializer='random_normal', kernel_regularizer=reg)
compile(model1, loss = "mse", optimizer = optimizer_sgd(lr = 0.001))
compile(model, loss = "mse", optimizer = optimizer_sgd(lr = 0.001))
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001))
?map
tr_means <- colMeans(X_train)
X_test_cen <- sweep(X_test,2,tr_means,FUN="-")
y_map = {5:0, 10:1, 25:2, 50:3, 100:4}
y_map = [5:0, 10:1, 25:2, 50:3, 100:4]
y_map = [5, 10, 25, 50, 100]
y_map1 = c(5, 10, 25, 50, 100)
y_map1 = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = merge(y_map1,y_map2)
View(y_map)
y_map = rbind(y_map1,y_map2)
View(y_map)
y_map[Y_train]
y_map = cbind(y_map1,y_map2)
View(y_map)
y_map[Y_train]
y_map
y_map_train <- merge(y_map, Y_train)
View(y_map_train)
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
View(y_map_train)
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
View(y_map_test)
y_train_cat <- as.factor(y_map_train)
y_test_cat <- as.factor(y_map_test)
history <- fit(X_train_cen, Y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
y_train_cat <- as.data.frame(as.factor(y_map_train))
history <- fit(X_train_cen, Y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
y_train_cat <- as.factor(y_map_train)
history <- fit(model,X_train_cen, Y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
y_train_cat <- as.data.frame(as.factor(y_map_train))
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
y_train_cat <- as.matrix(as.factor(y_map_train))
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
y_train_cat <- as.factor(y_map_train)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose=1)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
?fit
?fit
class(y_train_cat)
type(y_train_cat)
y_train_cat <- to_categorical(y_map_train)
y_map = cbind(y_map1,y_map2)
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_train_cat <- to_categorical(y_map_train)
y_train_cat <- to_categorical(as.numeric(y_map_train))
y_train_cat <- to_categorical(as.numeric(y_map_train), num_classes = 2)
y_train_cat <- to_categorical(y_map_train, num_classes = 2)
y_data=ifelse(rowSums(x_data) > 1.5, 1, 0)
x_data=matrix(data=runif(30000), nrow=10000, ncol=3)
# Output
y_data=ifelse(rowSums(x_data) > 1.5, 1, 0)
y_data
head(y_data)
y_train_cat <- to_categorical(y_map_train$y_map2)
y_test_cat <- to_categorical(y_map_test$y_map2)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
plot(history)
summary(history)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose = 1)
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'accuracy')
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose = 1)
plot(history)
y_train_cat <- to_categorical(y_map_train$y_map1, y_map_train$y_map2)
y_train_cat <- to_categorical(y_map_train)
y_map_test <- as.array(merge(y_map, Y_test, by.x = "y_map1", by.y = "y"))
y_map_test <- as.list(t(y_map_test))
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_test <- as.numeric(t(y_map_test))
y_map_train <- as.numeric(t(y_map_train))
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose = 1)
View(y_train_cat)
y_map_train <- as.numeric((y_map_train))
y_map_test <- as.numeric((y_map_test))
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose = 1)
y_map_train <- as.numeric((y_map_train$y_map2))
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_train <- as.numeric((y_map_train$y_map2))
y_map_test <- as.numeric((y_map_test$y_map2))
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64, verbose = 1)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
y_map_train <- as.array((y_map_train$y_map2))
y_map_test <- as.array((y_map_test$y_map2))
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_train <- as.array((y_map_train$y_map2))
y_map_test <- as.array((y_map_test$y_map2))
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
compile(model, loss = "categorical_crossentropy", optimizer = optimizer_rmsprop(), metrics = "accuracy")
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'mae')
source('C:/Users/melissa.wickers/OneDrive - Next Tier Concepts, Inc/Intro to Machine Learning/Week 3/classification_coins.R', echo=TRUE)
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'mae')
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'mae')
y_map1 = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y_map1,y_map2)
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_train <- as.array((y_map_train$y_map2))
y_map_test <- as.array((y_map_test$y_map2))
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
View(X_test_cen)
head(X_test_cen)
head(Y_train)
head(y_train_cat)
head(Y_train)
y_map_train <- (y_map_train$y_map2)
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_train <- y_map_train$y_map2
y_map_test <- y_map_test$y_map2
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
head(Y_train)
head(y_train_cat)
y_map_train <- y_map_train$y_map2
y_map_test <- y_map_test$y_map2
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
y_map_train <- y_map_train$y_map2
y_map_test <- y_map_test$y_map2
head(Y_train)
head(y_train_cat)
y_map_train <- merge(y_map, Y_train, by.x = "y_map1", by.y = "y")
y_map_test <- merge(y_map, Y_test, by.x = "y_map1", by.y = "y")
View(y_map_test)
y = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y_map1,y_map2)
y_map_train <- join(y_map, Y_train, by = y)
library(plyr)
y_map_train <- join(y_map, Y_train, by = y)
y_map_train <- join(as.data.frame(y_map), as.data.frame(Y_train), by = y)
y_map_train <- join(y_map, Y_train, by = y)
a <- as.data.frame(Y_train)
y_map_train <- join(y_map, as.data.frame(Y_train), by = y)
View(a)
y_map_train <- join(y_map, as.data.frame(Y_train, colnames = c("y")), by = y)
?as.data.frame
col.names
Y_train <- as.data.frame(Y_train)
colnames(Y_train) <- "y"
y_map_train <- join(y_map,),Y_train, by = y)
y_map_train <- join(y_map,Y_train, by = y)
View(Y_train)
y_map = cbind(y,y_map2)
Y_train <- as.data.frame(Y_train)
colnames(Y_train) <- "y"
y_map_train <- join(y_map,Y_train, by = y)
View(y_map)
y_map_train <- join(y_map,Y_train, by = "y")
as.data.frame(y_map)
y_map <- as.data.frame(y_map)
Y_train <- as.data.frame(Y_train)
colnames(Y_train) <- "y"
y_map_train <- join(y_map,Y_train, by = "y")
View(y_map_train)
y_map_train <- join(y_map,Y_train)
View(y_map_train)
y_map_train <- join(Y_train, y_map)
View(y_map_train)
y = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y,y_map2)
Y_train <- coinValues[trainIndexes]
y_map_train <- merge(Y_train,y_map, by = "y")
y = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y,y_map2)
y_map_train <- merge(Y_train,y_map, by = "y")
y = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y,y_map2)
y_map <- as.data.frame(y_map)
Y_train <- as.data.frame(Y_train)
colnames(Y_train) <- "y"
y_map_train <- merge(Y_train,y_map, by = "y")
View(y_map_train)
y_map_train <- join(Y_train, y_map)
View(y_map_train)
Y_test <- as.data.frame(Y_test)
colnames(Y_test) <- "y"
y_map_test <- join(Y_test, y_map)
y_map_train <- y_map_train$y_map2
y_map_test <- y_map_test$y_map2
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
head(Y_train)
head(y_train_cat)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'accuracy')
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
plot(history)
history$metrics
evaluate(model,X_test_cen, Y_test_cat)
evaluate(model,X_test_cen, y_test_cat)
predict(model, X_test_cen)
ModPred <- predict(model, X_test_cen)
plot(ModPred)
sink('coin_classification.txt')
library(keras)
library(tidyverse)
library(tensorflow)
library(magick)
library(plyr)
coinFiles <- list.files("classification")
loadImg <- function(path) {
coin <- image_read(paste0('classification/', path))
coinResized <- image_resize(coin, "160x120")
# Extract the raw bitmap matrix with pixel values with `image_data`.
pix <- image_data(coinResized)
# Convert it to an array.
pix_arr <- as.integer(pix)
# Flatten the array into a single dimension.
array_reshape(pix_arr, 57600)
}
coinList <- lapply(coinFiles, loadImg)
length(coinList)
coins <- array(unlist(coinList), dim=c(3059, 57600))
dim(coins)
coinValues <- unlist(lapply(coinFiles, function (f) as.integer(unlist(strsplit(f,"_"))[1])))
unique(coinValues)
nTrain <- floor(0.90 * nrow(coins))
trainIndexes <- sample(1:nrow(coins), size = nTrain)
X_train <- coins[trainIndexes,]
Y_train <- coinValues[trainIndexes]
X_test <- coins[-trainIndexes,]
Y_test <- coinValues[-trainIndexes]
X_train_cen <- scale(X_train, scale=FALSE)
X_train_std <- scale(X_train)
tr_means <- colMeans(X_train)
X_test_cen <- sweep(X_test,2,tr_means,FUN="-")
reg <- regularizer_l2(l = 0.01)
model <- keras_model_sequential() %>%
layer_dense(units=64, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg, input_shape = 57600) %>%
layer_dense(units=128, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,) %>%
layer_dense(units=32, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,)%>%
layer_dense(units=64, activation='relu', kernel_initializer='random_normal', kernel_regularizer = reg,)%>%
layer_dense(units=5 , activation='softmax', kernel_initializer='random_normal', kernel_regularizer=reg)
compile(model, loss = 'categorical_crossentropy', optimizer = optimizer_sgd(lr = 0.001), metrics = 'accuracy')
# compile(model, loss = "categorical_crossentropy", optimizer = optimizer_rmsprop(), metrics = "accuracy")
y = c(5, 10, 25, 50, 100)
y_map2 = c(0, 1, 2, 3, 4 )
y_map = cbind(y,y_map2)
y_map <- as.data.frame(y_map)
Y_train <- as.data.frame(Y_train)
colnames(Y_train) <- "y"
Y_test <- as.data.frame(Y_test)
colnames(Y_test) <- "y"
y_map_train <- join(Y_train, y_map)
y_map_test <- join(Y_test, y_map)
y_map_train <- y_map_train$y_map2
y_map_test <- y_map_test$y_map2
y_train_cat <- to_categorical(y_map_train)
y_test_cat <- to_categorical(y_map_test)
history <- fit(model,X_train_cen, y_train_cat, validation_split=0.20, epochs=50, batch_size=64)
plot(history)
evaluate(model,X_test_cen, y_test_cat)
evaluate
ModPred <- predict(model, X_test_cen)
ModPred
sink()
history
